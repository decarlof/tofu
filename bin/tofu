#!/usr/bin/env python

import os
import sys
import argparse
import logging
import time
import re
from tofu import config, __version__


LOG = logging.getLogger(__name__)


def init(args):
    if not os.path.exists(config.NAME):
        config.write(args.config)
    else:
        sys.exit("{0} already exists".format(config.NAME))


def run_tomo(args):
    from tofu import reco
    reco.tomo(args)


def run_lamino(args):
    from tofu import lamino
    lamino.lamino(args)


def run_flat_correction(args):
    from tofu import flatcorrect
    flatcorrect.run(args)


def run_sinos(args):
    from tofu import sinos
    sinos.make_sinos(args)


def get_ipython_shell(config=None):
    import IPython

    version = IPython.__version__
    shell = None

    def cmp_versions(v1, v2):
        """Compare two version numbers and return cmp compatible result"""
        def normalize(v):
            return [int(x) for x in re.sub(r'(\.0+)*$', '', v).split(".")]

        n1 = normalize(v1)
        n2 = normalize(v2)
        return (n1 > n2) - (n1 < n2)

    if cmp_versions(version, '0.11') < 0:
        from IPython.Shell import IPShellEmbed
        shell = IPShellEmbed()
    elif cmp_versions(version, '1.0') < 0:
        from IPython.frontend.terminal.embed import \
            InteractiveShellEmbed
        shell = InteractiveShellEmbed(config=config, banner1='')
    else:
        from IPython.terminal.embed import InteractiveShellEmbed
        shell = InteractiveShellEmbed(config=config, banner1='')

    return shell


def run_interactive(args):
    from tofu import reco

    shell = get_ipython_shell()
    shell()


def gui(args):
    from tofu import gui
    gui.main(args)


def estimate(params):
    from tofu import reco
    center = reco.estimate_center(params)
    if params.verbose:
        out = '>>> Best axis of rotation: {}'.format(center)
    else:
        out = center

    print(out)


def perf(args):
    from tofu import reco

    def measure(args):
        exec_times = []
        total_times = []

        for i in range(args.num_runs):
            start = time.time()
            exec_times.append(reco.tomo(args))
            total_times.append(time.time() - start)

        exec_time = sum(exec_times) / len(exec_times)
        total_time = sum(total_times) / len(total_times)
        overhead = (total_time / exec_time - 1.0) * 100
        input_bandwidth = args.width * args.height * num_projections * 4 / exec_time / 1024. / 1024.
        output_bandwidth = args.width * args.width * height * 4 / exec_time / 1024. / 1024.
        slice_bandwidth = args.height / exec_time

        # Four bytes of our output bandwidth constitute one slice pixel, for each
        # pixel we have to do roughly n * 6 floating point ops (2 mad, 1 add, 1
        # interpolation)
        flops = output_bandwidth / 4 * 6 * num_projections / 1024

        msg = ("width={:<6d} height={:<6d} n_proj={:<6d}  "
               "exec={:.4f}s  total={:.4f}s  overhead={:.2f}%  "
               "bandwidth_i={:.2f}MB/s  bandwidth_o={:.2f}MB/s slices={:.2f}/s  "
               "flops={:.2f}GFLOPs\n")

        sys.stdout.write(msg.format(args.width, args.height, args.number,
                                    exec_time, total_time, overhead,
                                    input_bandwidth, output_bandwidth, slice_bandwidth, flops))
        sys.stdout.flush()

    args.generate_input = True
    args.dry_run = True

    for width in range(*args.width_range):
        for height in range(*args.height_range):
            for num_projections in range(*args.num_projection_range):
                args.width = width
                args.height = height
                args.number = num_projections
                measure(args)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(__version__))

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    cmd_parser = subparsers.add_parser('init', help="Create a configuration file")
    cmd_parser.add_argument('--verbose', **config.SECTIONS['general']['verbose'])
    cmd_parser.set_defaults(_func=init)

    flatcorrect_params = config.Params(sections=('flat-correction',))
    flatcorrect_parser = subparsers.add_parser('flatcorrect', help="Run flat field correction")
    flatcorrect_parser = flatcorrect_params.add_arguments(flatcorrect_parser)
    flatcorrect_parser.set_defaults(_func=run_flat_correction)

    sinos_params = config.Params(sections=('flat-correction', 'sinos'))
    sinos_parser = subparsers.add_parser('sinos', help="Generate sinograms from projections")
    sinos_parser = sinos_params.add_arguments(sinos_parser)
    sinos_parser.set_defaults(_func=run_sinos)

    tomo_params = config.TomoParams()
    tomo_parser = subparsers.add_parser('tomo', help="Run tomographic reconstruction")
    tomo_parser = tomo_params.add_arguments(tomo_parser)
    tomo_parser.set_defaults(_func=run_tomo)

    gui_params = config.TomoParams(sections=('gui',))
    gui_parser = subparsers.add_parser('gui', help="GUI for tomographic reconstruction")
    gui_parser = gui_params.add_arguments(gui_parser)
    gui_parser.set_defaults(_func=gui)

    lamino_params = config.LaminoParams()
    lamino_parser = subparsers.add_parser('lamino', help="Run laminographic reconstruction")
    lamino_parser = lamino_params.add_arguments(lamino_parser)
    lamino_parser.set_defaults(_func=run_lamino)

    estimate_params = config.TomoParams(sections=('estimate',))
    estimate_parser = subparsers.add_parser('estimate', help="Estimate center of rotation")
    estimate_parser = estimate_params.add_arguments(estimate_parser)
    estimate_parser.set_defaults(_func=estimate)

    perf_params = config.TomoParams(sections=('perf',))
    perf_parser = subparsers.add_parser('perf', help="Check reconstruction performance")
    perf_parser = perf_params.add_arguments(perf_parser)
    perf_parser.set_defaults(_func=perf)

    interactive_params = config.TomoParams()
    interactive_parser = subparsers.add_parser('interactive', help="Run interactive mode")
    interactive_parser = interactive_params.add_arguments(interactive_parser)
    interactive_parser.set_defaults(_func=run_interactive)

    args = config.parse_known_args(parser, subparser=True)

    if args.verbose:
        logging.basicConfig(level=logging.INFO)

    args._func(args)


if __name__ == '__main__':
    main()

# vim: ft=python
